{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","feeBalance","useFeeBalance","farms","useFarms","usePriceBnbBusd","usePriceCakeBnb","circSupply","minus","cakeSupply","marketCap","times","eggPerBlock","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","isDark","useContext","ThemeContext","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/13.c75ec662.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useFeeBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0xC74CDF1E1cd26cC827F247BC8A0033C4690175e3').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'GOOSE to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'GOOSE in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance, useFeeBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms,  usePriceBnbBusd,usePriceCakeBnb } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply() \n  const burnedBalance = useBurnedBalance(getCakeAddress())\n    const feeBalance = useFeeBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = new BigNumber(usePriceBnbBusd().toNumber()*usePriceCakeBnb().toNumber())\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n  let eggPerBlock = 0;\n  if(farms && farms[0] && farms[0].eggPerBlock){\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(222534, 'GOOSE Stats')}\n        </Heading>\n                <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n          <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New EGG/block')}</Text>\n          <Text bold fontSize=\"14px\">{eggPerBlock}</Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(522240, 'Fee on transfer')}</Text>\n          <Text bold fontSize=\"14px\">{10}%</Text>\n        </Row>\n          <Row>\n          <Text fontSize=\"14px\">{TranslateString(531238, 'Fees held')}</Text>\n          \n          <CardValue fontSize=\"14px\" value={getBalanceNumber(feeBalance)} decimals={7} />\n                    </Row>\n                    <Row>\n         <Text bold fontSize=\"14px\">  Fees will be sent to MasterChef to offset minting.</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'TheGooseSwap'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React, {useContext} from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport { ThemeContext } from '../../contexts/ThemeContext'\n\n\n\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n    const { isDark } = useContext(ThemeContext);\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color= {isDark ? \"#FFFFFF\" : \"#000000\"}>\n          {TranslateString(1111576, 'GooseSwap . Finance')}\n        </Heading>\n        <Text>{TranslateString(578, 'Top 3 best DEFI app on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}